// Generated by CoffeeScript 1.7.1
(function() {
  var ZimbraSoap, js2xml, processors, request, xml2js;

  request = require('request');

  js2xml = require('js2xmlparser');

  xml2js = require('xml2js').parseString;

  processors = require('../node_modules/xml2js/lib/processors');

  ZimbraSoap = (function() {
    function ZimbraSoap(soap_host, admin_user, admin_pass) {
      this.soap_host = soap_host;
      this.admin_user = admin_user != null ? admin_user : '';
      this.admin_pass = admin_pass != null ? admin_pass : '';
      this.def_url = this.soap_host;
    }

    ZimbraSoap.prototype._conformMessage = function(body) {
      var data;
      data = {
        "@": {
          "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope",
          "xmlns:zadmin": "urn:zimbraAdmin",
          "xmlns:zaccount": "urn:zimbraAccount",
          "xmlns:zmail": "urn:zimbraMail",
          "xmlns:zsync": "urn:zimbraSync",
          "xmlns:zvoice": "urn:zimbraVoice",
          "xmlns:zrepl": "urn:zimbraRepl"
        },
        "soap:Header": {
          "context": {
            "@": {
              "xmlns": "urn:zimbra"
            }
          }
        },
        "soap:Body": body
      };
      return js2xml("soap:Envelope", data);
    };

    ZimbraSoap.prototype._getSoapRequest = function(message, cb) {
      var req_opts;
      req_opts = {
        url: this.def_url,
        method: 'POST',
        headers: {
          'Content-Type': 'application/soap+xml; charset=utf-8'
        },
        body: message,
        strictSSL: false,
        jar: true,
        timeout: 10000
      };
      return request(req_opts, function(err, response, body) {
        var parser_opts;
        if (cb != null) {
          if (!err) {
            parser_opts = {
              tagNameProcessors: [processors.stripPrefix],
              normalizeTags: true,
              explicitArray: false
            };
            return xml2js(body, parser_opts, function(err, res) {
              if (!err) {
                return cb(null, res);
              } else {
                return cb(err, null);
              }
            });
          } else {
            return cb(err, null);
          }
        }
      });
    };

    ZimbraSoap.prototype.method = function(method, params, cb) {
      var body, _cb;
      if (method.indexOf('zadmin' > -1)) {
        this.def_url = "" + this.soap_host + ":7071/service/admin/soap";
      } else {
        this.def_url = "" + this.soap_host + "/service/soap";
      }
      _cb = function(err, res) {
        var _ref, _ref1, _ref2;
        if (!err && (res != null)) {
          if (cb != null) {
            if (((_ref = res.envelope) != null ? (_ref1 = _ref.body) != null ? _ref1.fault : void 0 : void 0) != null) {
              return cb("ZIMBRA_ERROR: " + res.envelope.body.fault.reason.text, null);
            } else if (((_ref2 = res.envelope) != null ? _ref2.body : void 0) != null) {
              return cb(null, res.envelope.body);
            } else {
              return cb('INTERNAL_ERROR', res);
            }
          }
        } else {
          return cb(err, null);
        }
      };
      body = {};
      body[method] = params;
      return this._getSoapRequest(this._conformMessage(body), _cb);
    };

    return ZimbraSoap;

  })();

  exports.ZimbraSoap = ZimbraSoap;

}).call(this);
